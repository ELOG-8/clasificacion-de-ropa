# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RnB4q0zM3uun1ZKw9-qm3DgpeEEu3_Sa
"""

import numpy as np
import cv2
import time
import tflite_runtime.interpreter as tflite
import RPi.GPIO as GPIO

# Pines para servos
servo_pins = [17, 27, 22]  # Blanca, Colores, Oscura
GPIO.setmode(GPIO.BCM)
for pin in servo_pins:
    GPIO.setup(pin, GPIO.OUT)

servos = [GPIO.PWM(pin, 50) for pin in servo_pins]
for servo in servos:
    servo.start(0)

def mover_servo(index):
    servos[index].ChangeDutyCycle(7.5)
    time.sleep(1)
    servos[index].ChangeDutyCycle(2.5)
    time.sleep(0.5)
    servos[index].ChangeDutyCycle(0)

# Cargar modelo
interpreter = tflite.Interpreter(model_path="my_model.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Capturar imagen
cap = cv2.VideoCapture(0)
ret, frame = cap.read()
cap.release()

if not ret:
    print("❌ No se pudo capturar imagen")
    GPIO.cleanup()
    exit()

img = cv2.resize(frame, (224, 224))
img = np.expand_dims(img, axis=0).astype(np.float32) / 255.0

interpreter.set_tensor(input_details[0]['index'], img)
interpreter.invoke()
output = interpreter.get_tensor(output_details[0]['index'])

# Predicción
class_names = ['Blanca', 'Colores', 'Oscura']
pred_index = np.argmax(output)
print(f"✅ Resultado: {class_names[pred_index]}")

mover_servo(pred_index)

# Liberar
for servo in servos:
    servo.stop()
GPIO.cleanup()